["Languages\n\u2022Solve problems using a computer, give the \ncomputer instructions.\n\u2022Remember our diaper -changing exercise? \n\nTalk the talk\n\u2022Speak its language\n\u2013High -level: Python, C++, Java\n\u2013Low-level: machine language, computers can only \nexecute these\n\u2013High -level languages have to be processed into \nlow-level before the computer can run them\n\u2013But high -level languages can run on different kinds \nof computers and are easier for humans to write \nand read, so most programs are written in high -\nlevel\nTranslation\n\u2022How does high -level get translated into low -\nlevel?\n\u2013Interpreters and compilers!\n\u2013Interpreter processes the program a little bit at a \ntime and runs it\n\u2013Compiler translates everything before running it\n\nWhat is                  ?\nPython is a programming language that \nlets you work", "time and runs it\n\u2013Compiler translates everything before running it\n\nWhat is                  ?\nPython is a programming language that \nlets you work more quickly and integrate \nyour systems more effectively .\n(in other words, magic!)\nhttp://www.python.org/\n\nPython Vocab\n\u2022Program \u2013A larger file of code that may contain one or \nmore functions.\n\u2022Variable -names that you can assign values to, allowing \nyou to reuse them later on.\nE.g.:  x = 1 or msg= \u201cHi, I\u2019m a message!\u201d\n\u2022Comments \u2013These are notes ignored by the computer. In \nPython, comments start with a hash mark (#) and end at \nthe end of the line.\nE.g.: >>> x + y #both variables store user \ninput\n\u2022Operators \u2013Mathematical symbols, like +, -, *, and /, but \nalso ** (for exponents).\n\nPython Vocab\n\u2022Keyword \u2013Words with meaning/purpose in \nPyth", "input\n\u2022Operators \u2013Mathematical symbols, like +, -, *, and /, but \nalso ** (for exponents).\n\nPython Vocab\n\u2022Keyword \u2013Words with meaning/purpose in \nPython. E.g. \u201c and \u201d, \u201cprint \u201d, and \u201cif\u201d.\n\u2022Function \u2013A chunk of code that performs an \naction. Functions have names and are reusable. \nKinds: built -in ones, and \u201cuser -defined\u201d ones.\n\u2022Expression \u2013Statements that produce values. \nExamples include 3 + 5, \"Hello world!\u201c.\n\u2022Error \u2013When your program has a problem, the \ncommand area will provide an error message. \n\nWhat is JES?\nJython Environment for Students allows you to \nprogram and experiment with python.\nThe top part (the white window with the tiny \nnumber 1, which tells you that that\u2019s line \nnumber 1), or the \u201cprogram area\u201d, works like \nany text editor would, where you can type \nstuff and save it", "number 1, which tells you that that\u2019s line \nnumber 1), or the \u201cprogram area\u201d, works like \nany text editor would, where you can type \nstuff and save it under some file name so you \ncan close it and pull it back up later. \nThe bottom part (in black), the \u201ccommand \narea\u201d, is the brains of the operation.\nAfter you are done writing a program here\nClick Load Program to compile the program\nWriting Your Program\nHeader Comments:\n# file name: circ.py\n# author: DurrahAlmansour\n# description: a program to \ncalculate the area of a circle.\n\nIndentation\n\u2022Not an Option, but a Requirement! \n\u2022In Python, indenting specifies the \u201cscope\u201d of \ndifferent chunks of your code.\ndef main():\nprint \"Hello world!\"\nThe print line will be executed when you invoke  \nmain(). \n\nWriting Your Program\n\u2022Always plan what you want", "our code.\ndef main():\nprint \"Hello world!\"\nThe print line will be executed when you invoke  \nmain(). \n\nWriting Your Program\n\u2022Always plan what you want your program to \ndo (pseudocode ).\n\u2022Divide it into parts, it will make it easier to \ndebug and update later.\n\nWriting Your Program\nDefining Functions:\ndef main():\nprint \"Hello world!\"\n-Name the function for the purpose you wrote \nit for.\n-Don\u2019t forget to indent the instructions that go \ninside the function.\n\nArgument\nA value passed to a function or method, \nassigned to a named local variable in the \nfunction body. \nEx. def addUp(a,b):\nprint(\u201cthis is a+b: \u201c, a+b)\n#a and b are the parameters , 1 and  3 are the \narguments we passed in. \n#The function outputs : this is 1+3: 4\nhttp://docs.python.org/glossary.html#glossary\n\nCalling Functions\nmain(", "and  3 are the \narguments we passed in. \n#The function outputs : this is 1+3: 4\nhttp://docs.python.org/glossary.html#glossary\n\nCalling Functions\nmain()\nwill give the output\nHello world!\n-There is no colon when calling a function!\n-Use colons with \u201cdef\u201d.:\n\n\u2022Try this yourself\n\nOutput\nE.g. Print:\nprint \"Hello world!\"\nwill give the output\nHello world!\n\nSimilar formatting, different output\n\u2022print \"Hello\", \"world\", \"!\"\nwill output\nHello world !\n\u2022print \"Hello\" + \"world\" + \"!\"\nwill output\nHelloworld !\n\nSimilar formatting, different output\n\u2022print \"Hello\"\nprint \"world\"\nprint \"!\u201c\n\u2022will give the output\nHello\nworld\n!\n\u2022print \"Hello\u201c,\nprint \"world\u201c,\nprint \"!\u201c\n\u2022will give the output\nHello world !\nData Types\nThe data type of an object determines the values it can \nhold, and the operations which can be perfo", "!\u201c\n\u2022will give the output\nHello world !\nData Types\nThe data type of an object determines the values it can \nhold, and the operations which can be performed on \nit.\n\u2022Numeric Data\nNumeric data comes in 2 main flavors:\n\u2013Integers (whole numbers) 2, 5, -7, etc.\n\u2013Floating Point Numbers (non -integers) 0.2, 5.125, etc.\n(CS108 Notes, Prof. Aaron Stevens)\n\nData Types\n\u2022Non -numeric Data Types:\nThose include strings (text), lists, dictionaries, \netc.. \nBasically anything you can not add up using a \nsimple plus sign (+).\n\nNot a String? Not a Problem!\nYou can also format outputting variables you\u2019ve \ndefined:\n\u2022x = 42\nprint\u201c The value of x is\", x, \".\u201c\n\u2022will give the output\nThe value of x is 42 .\n\nNot a String? Not a Problem!\n\u2022x = 42\nprint \"$\" + x\ncauses an error.\n\u2022So what do we do?\nx = 42\nprint \"$\" + str(", "give the output\nThe value of x is 42 .\n\nNot a String? Not a Problem!\n\u2022x = 42\nprint \"$\" + x\ncauses an error.\n\u2022So what do we do?\nx = 42\nprint \"$\" + str(x)\nwill give the output\n$42\n\nDefining Variables\nRules for naming variables:\n\u2022Have to start with a letter or underscore (_)\n\u2022Can contain letters, numbers, and underscores\n\u2022Can\u2019t contain spaces, punctuation, etc.\n\u2022Can\u2019t be Python keywords\n\u2022Are case sensitive\n\nDefining Variables\nThings that aren\u2019t rules, but are worth considering:\n\u2022You should give your variables sensible names \n(\u201cprice\u201d, \u201c pixelColor , or \u201c samplingRate \u201d instead of \n\u201cx\u201d)\n\u2022Just because you technically can start your \nvariable names with underscores doesn\u2019t mean \nyou should. \n\nDefining Variables\n\u2022For multi -word variable names, two options:\n\u2013start capitalizing each word after the", "with underscores doesn\u2019t mean \nyou should. \n\nDefining Variables\n\u2022For multi -word variable names, two options:\n\u2013start capitalizing each word after the first \u201c myCar \u201d\n\u2013separate words with underscores. For instance, a \nvariable for \u201cFord Focus\u201d could be \u201c my_car \u201d.\n\u2022Abbreviating is common for longer words. So, a \nvariable for \u201caverage price\u201d could be \u201c avgPrice \u201d \nor even \u201c avg\u201d.\nVariables\n\u2022Variables can hold all kinds of values, including \nstrings, different types of numbers, and user \ninput.\n\u2022To assign a string value to a variable, you have to \nwrap the string in quotes (like usual).\nfirstName = \"John\"\nlastName = \"Doe\"\nmathProblem = \"5 + 5\"\nprint lastName , \",\", firstName , \";\", \nmathProblem\nwill give the output\nDoe , John ; 5 + 5\n\nVariables\n\u2022Variables can also be assigned new values that", "print lastName , \",\", firstName , \";\", \nmathProblem\nwill give the output\nDoe , John ; 5 + 5\n\nVariables\n\u2022Variables can also be assigned new values that \nare relative to their old values. For example:\ntotal = 10\nprint \"Original total:\", total\ntotal = total + 4\nprint \"New total:\", total\nwill give the output\nOriginal total: 10\nNew total: 14\n\nVariables\n\u2022Remember: A variable has to have been \ndefined on a previous line before it can be \nused on the right -hand side of an equation, \nso:\n\u2022total = total + 4\nprint \"Total:\", total\ncauses an error, since there was no mention of \nthe value of \u201ctotal\u201d before the line trying to \nredefine it.\nNumeric Operators\n\u2022Python built -in numeric operators:\n\u2022+  addition\n\u2022-subtraction\n\u2022* multiplication\n\u2022/ division\n\u2022** exponentiation\n\u2022% remainder (modulo)\n(CS108 Notes", "rs\n\u2022Python built -in numeric operators:\n\u2022+  addition\n\u2022-subtraction\n\u2022* multiplication\n\u2022/ division\n\u2022** exponentiation\n\u2022% remainder (modulo)\n(CS108 Notes, Prof. Aaron Stevens)\nPython Arithmetic\n\u2022Try writing the following code in your program area and see what it \noutputs\nDef main():\na = 12\nb = 2\nc = 16\nd = 3\ne = 2.5\nprint \"the value of a is\", a\nprint (a / b) * 5\nprint a + b * d\nprint (a + b) * d\nprint b ** d\nprint c -e\na = a + b\nprint \"the value of a is\", a\nPython Arithmetic\n\u2022Is this what you got?\nthe value of a is 12\n30\n18\n42\n8\n13.5\nthe value of a is 14\nExercise Time!\n\u2022Write a program that takes in a birthday ( dd, \nmm, yy) and returns: \n\u2013The age\n\u2013Number of days until next birthday\nTaking User Input\nSometimes, instead of passing in arguments, \nyou can ask for them after calling the function.", "ge\n\u2013Number of days until next birthday\nTaking User Input\nSometimes, instead of passing in arguments, \nyou can ask for them after calling the function.\nTaking User Input\n\u2022requestNumber ()\n\u2022requestInteger ()\n\u2022requestIntegerInRange ()\n\u2022requestString ()\n\nTaking User Input\nname = requestString (\"Enter your name:\")\nprint name\nfirst pops up a dialog box (where you can enter a name, say \n\u2018John Doe\u2019):\nthen outputs\nJohn Doe\n\nEx. Try it with Numbers!\nnum = requestNumber (\"Enter a number:\")\nprint \"Your number:\", num\nprint \"Your number squared:\", num*num\nThis is where you put the message \nyou want to appear with your \ninput box!\nEx. Try Inputting a String\n\u2022Make JES print \u201c<input> is awesome! \u201d\nname = requestString (\"Enter your name:\")\nprint name, \u201cis awesome!\u201d\n\nThe For Loop\n\u2022Also known as the \u201cdefinite", "\u2022Make JES print \u201c<input> is awesome! \u201d\nname = requestString (\"Enter your name:\")\nprint name, \u201cis awesome!\u201d\n\nThe For Loop\n\u2022Also known as the \u201cdefinite loop\u201d.\n\u2022Allows you to specify a list of items (numbers, \nwords, letters, etc.), and specify action(s) to \nbe performed on each one.\n\u2022The official form for the for loop is this: \nfor < var> in <sequence>:\n<body>\n(Note that the body is indented to in the loop)\nThe Kittens Need Your Help!\nYou are working at an animals shelter, you are \nasked to take a group of kittens, bathe, dry, \nand feed each one individually. \n\nThe Kittens Need a Loop!\nUsing a for -loop type notation, your instructions \nwould look like this:\nKittens = [kitty #1, kitty#2, \nkitty#3, ...] \nfor kitty in Kittens:\nbathe kitty\ndry kitty\nfeed kitty\n\nEx. For Loop\n\u2022phrase = \"Hello wo", "look like this:\nKittens = [kitty #1, kitty#2, \nkitty#3, ...] \nfor kitty in Kittens:\nbathe kitty\ndry kitty\nfeed kitty\n\nEx. For Loop\n\u2022phrase = \"Hello world!\"\nfor letter in phrase:\nprint \"the next letter is:\", letter\nwill give the output\nthe next letter is: H\nthe next letter is: e\nthe next letter is: l\nthe next letter is: l\nthe next letter is: o\nthe next letter is:\nthe next letter is: w\nthe next letter is: o\nthe next letter is: r\nthe next letter is: l\nthe next letter is: d\nthe next letter is: !\n\nWhat Just Happened? \n\u2022What Python did was that it went through the \nline one character at a time, treating the line \nlike a sequence. \n\u2022That means that the line can be split into its \ncomponents (the characters).\n\nsplit()\nWant to work with units of a phrase that aren\u2019t \ncharacters?\nPut something in th", "the line can be split into its \ncomponents (the characters).\n\nsplit()\nWant to work with units of a phrase that aren\u2019t \ncharacters?\nPut something in the <sequence> position that \nisn\u2019t just a string.\nThe result is a list of all the items in the phrase \nthat are separated by spaces.\n\nsplit()\nphrase = \"Hello beautiful world!\"\nfor word in phrase.split ():\nprint \"the next word is:\", word\nwill give the output\nthe next word is: Hello\nthe next word is: beautiful\nthe next word is: world!\nsplit()\nIn fact, if you printed phrase.split () to see \nwhat it looked like, you\u2019d get *'Hello', \n'beautiful', 'world!'], a list containing each \n\u201cword\u201d\n(You will learn about lists tomorrow \uf04a)\n\nAccumulator Variables\nWhen you\u2019re using a for loop, sometimes you \nwant to keep a running total of numbers \nyou\u2019re calcula", "rn about lists tomorrow \uf04a)\n\nAccumulator Variables\nWhen you\u2019re using a for loop, sometimes you \nwant to keep a running total of numbers \nyou\u2019re calculating, or re -combine bits of a \nstring.\n\nAccumulator Variables\nSteps:\n1. Define it for the first time before the for loop starts.\n2. Redefine it as itself plus some operation in the body of \nthe for loop.\ntotal = 0\nfor num in [1,2,4,10,20]:\ntotal = total + num\nprint \"Total:\", total\nwill give the output\nTotal: 37\n\nAccumulator Variables\nWhat is the point of accumulator variables?\n-Counting.\n-keeping score (affects program does).\n-debugging.\n\nConditional Statements\nEquals: ==\nDoes not equal: != \nTry this:\nx = 1 \nIf( x != 2)\nprint \u201cArtemis rocks\u201d\n\nPictures\n\nFile Functions\n-pictures live within files.\n-You must get your program to go find and \nrea", "y this:\nx = 1 \nIf( x != 2)\nprint \u201cArtemis rocks\u201d\n\nPictures\n\nFile Functions\n-pictures live within files.\n-You must get your program to go find and \nread a file that\u2019s somewhere else on your \ncomputer.\n\nSteps: \n1.Store the \u201caddress\u201d for the file you want as a \nvariable\n2.Use functions to read, display, or modify the \nfile at that location.\nFile Functions\nmyFile= pickAFile ()\nThis function notes the \u2018path name\u2019 (as a string) of your \nfile, i.e. the \u201caddress\u201d of that file on your computer.\nIt brings up the \u2018file \nselector dialog\u2019.File Functions\nFile Functions\nIf it is a picture, and you wish to treat it as such:\nmyPic= makePicture (myFile)\nThese functions will not make anything appear. \nSo far, things are just stored in the computer\u2019s \nmemory, invisible to the user.\nAfter modifying your sound/", "functions will not make anything appear. \nSo far, things are just stored in the computer\u2019s \nmemory, invisible to the user.\nAfter modifying your sound/picture you may \nwant to save it as a new file, since \u2018repainting\u2019 \na picture or \u2018playing\u2019 a sound will simply show \nyou your work, not save it anywhere.\nPictures\n\nPictures\nHow?\nUsewritePictureTo after you specify the path. \nTry this in the command area\npath =\"/Users/ Durrah/Documents/stuff/editedpic.jpg\"\nwritePictureTo (pic,path )\n\nPictures\nTry writing this simple function\nThis shows a \nwindow \ncontaining \nthe picture.\nPictures\n-Find a small picture (use Google)\n-Save it in Documents.\n-Enter the following\n\nPictures\nYour picture should appear\n\nPictures\nNow enter explore( pic)\nClick anywhere in \nthe picture that \njust popped up \nand you\u2019ll see", "e following\n\nPictures\nYour picture should appear\n\nPictures\nNow enter explore( pic)\nClick anywhere in \nthe picture that \njust popped up \nand you\u2019ll see \ntheX & Y \ncoordinates of \nthe pixel. \nPictures\nThis function is useful when you are trying to \nlocate a certain pixel that you want to play \nwith. It gives you the Red, Green and Blue\nvalues of that pixel. This is the stuff of which \nPhotoshop is made \uf04a!\n\nPixel Functions\nSo how do you make changes to your picture?\n-Target one pixel \n-Target all pixel\n\nGetting a Pixel\ngetPixel takes three parameters, the picture \nto take the pixel info from, the x -value of the \ndesired pixel, and the y -value of the pixel, in \nthe formgetPixel (pic, x, y)\nAdd this to your command area\n\nPixel Functions\naPixel= getPixel (pic, x, y) stores \nthe color informati", "of the pixel, in \nthe formgetPixel (pic, x, y)\nAdd this to your command area\n\nPixel Functions\naPixel= getPixel (pic, x, y) stores \nthe color information of the pixel located at \n(5, 10) in the picture pic in the variable \naPixel .\nBut what if we want ALL the pixels?\n\nGet Those Pixels!\ngetPixels (pic)\n\nPIXELIZATION!\nNow we want to change every single pixel\u2026 How \nwill we ever do that?\n\nThere are New \nPixels in Town\nDon\u2019t forget to indent!\n\nYour picture has not changed yet? That is \nbecause you haven\u2019t applied the changes to it!\nEnter: \nrepaint( pic)\nPictures\n\nTHE CHALLENGE\nCan you write a program (in the program area) \nthat changes the color of the  picture the way \nwe did?\nYou have all the functions in your command \narea. \nI will give you the pseudocode and you have to \ncode it however you", "the  picture the way \nwe did?\nYou have all the functions in your command \narea. \nI will give you the pseudocode and you have to \ncode it however you see fit. \n\nRemember to start with def main(): and to \nindent everything to be inside it! \nThe program should have 9 lines of code. I will \nshow one line of code every TWO minutes\nCan you beat the PowerPoint?THE CHALLENGE\n\nPictures\nGet the file\nMake it a picture\nDisplay it\nExplore it\nGet one pixel\nChange the color \nof the picture\nApply the changes\n\nNegative\nWhen creating a negative, we  want the \nopposite of each of the current values for red, \ngreen, and blue. If we have a red component \nof 0, we want 255 instead, If we have 255, we \nwant 0. \nIn other words, we are getting |255 -current| for \nevery pixel in the picture.\nNegative\nDef negative(", "e want 255 instead, If we have 255, we \nwant 0. \nIn other words, we are getting |255 -current| for \nevery pixel in the picture.\nNegative\nDef negative():\nfile = pickAFile () \npic= makePicture (file)\nfor pxin getPixels (pic):\nred = getRed(px)\ngreen = getGreen (px)\nBlue = getBlue(px)\nnegColor = makeColor (255-red, 255 -green, 255 -blue)\nsetColor (px, negColor )\nrepaint( pic)\nshow(pic)\n\nMirror, Mirror on the Wall\n\u2022We can use Python to manipulate more than \nthe colors of the picture. We can do this:\n\n#Starting with pseudocode\nmirrorVertical ():\nGet a picture\nIdentify its middle.\nin every row \nreplace each column with the at the same \ndistance from the middle until you reach the \nmiddle\napply changes \nshow the pictureCode, Code on the Screen\n\ndef mirrorVertical ():\nfile = pickAFile () \npic= make", "the middle until you reach the \nmiddle\napply changes \nshow the pictureCode, Code on the Screen\n\ndef mirrorVertical ():\nfile = pickAFile () \npic= makePicture (file)\nmirrorpoint = getWidth (pic)/2\nfor y in range(1, getHeight (pic)):\nfor xOffset in range(1, mirrorpoint ):\npright= getPixel (pic, mirrorpoint+xOffset , y)\npleft= getPixel (pic, mirrorpoint -xOffset,y )\nc = getColor (pleft)\nsetColor (pright, c)\nrepaint( pic)\nshow(pic)Code, Code on the Screen\n\nExtra Challenge\n\u2022As you can see, the right side mirrored the left \nside (and that\u2019s why the creature has two \nheads).  \n\u2022Can you change your code\nSo it does the opposite?\n(i.e. let the left side mirror \nthe right side)\n\nReversed Mirroring\n\u2022This is the result I got:\n\nAre the soldiers, clouds, big creature \nactually there?\n\nThe Green Screen\n\u2022P", "e mirror \nthe right side)\n\nReversed Mirroring\n\u2022This is the result I got:\n\nAre the soldiers, clouds, big creature \nactually there?\n\nThe Green Screen\n\u2022Placing an object (foreground) in a \nbackground of our choice.\n\nThe Green Screen\n\u2022Tell the computer look at each pixel, and see if \nits red and blue values are less than its green \nvalue. \n\u2022If (red+blue < green) then that pixel is likely to \nbelong to the green screen. Now tell the \ncomputer to get the pixel at the same location \nfrom the background and paint it on the green \nscreen.\n\nThe Green Screen\nSo in a way, you are actually placing the \nbackground on the foreground, not the other \nway around.\nAlso, it could be a blue screen. (How will the \ncode change?)\n\nThe Green Screen Code\n\u2022How do you think the code should look like?\n\nThe Green Scree", "nd.\nAlso, it could be a blue screen. (How will the \ncode change?)\n\nThe Green Screen Code\n\u2022How do you think the code should look like?\n\nThe Green Screen Effect\nYou do not get perfect \nresults all the time\u2026\n\nOur Journey Ends Here\nBut yours doesn\u2019t need to! \n\nWant to learn more?\nGo to: \nwiki. python .org/ moin /BeginnersGuide\nThis presentations was based on the CS101  Guide to Python and JES \n(http://www.cs.bu.edu/courses/cs101b1/jes )\nQuestions?"]